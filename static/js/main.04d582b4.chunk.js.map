{"version":3,"sources":["img/logo.png","components/Image.jsx","components/Navigation.js","components/Header.js","components/Message.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Image","react_default","a","createElement","src","logo","className","alt","React","Component","Navigation","href","this","props","titulo","Image_Image","Header","components_Navigation","Message","style","color","site","target","rel","title","App","state","info","fetch","dataRaw","json","data","setState","results","characters","map","character","index","components_Message","key","concat","name","eye_color","gender","birth_year","height","mass","components_Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sRCGlCC,mLAEE,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,gBAHjCC,IAAMC,WCoBXC,mLAlBN,OACIT,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uCACZL,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,IAAKL,UAAU,eAEnBM,KAAKC,MAAMC,QAGfb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACY,EAAD,eAVKN,aCWVO,mLARP,OACIf,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cACdL,EAAAC,EAAAC,cAACc,EAAD,CAAYH,OAAO,yBALdL,aCcNS,MAff,SAAiBL,GACb,OACIZ,EAAAC,EAAAC,cAAA,KACIgB,MAAO,CAACC,MAAOP,EAAMO,OACrBT,KAAME,EAAMQ,KACZC,OAAO,SACPC,IAAI,uBAGJV,EAAMW,MAAQX,EAAMW,MAAQ,wBCyEzBC,6MA3EbC,MAAQ,CACNC,KAAM,uNAIgBC,MAAO,8CAAvBC,kBACaA,EAAQC,cAArBC,SAENnB,KAAKoB,SAAS,CAACL,KAAMI,EAAKE,6IAI5B,IAAMC,EAAatB,KAAKc,MAAMC,KAAKQ,IAAI,SAASC,EAAWC,GACvD,OACEpC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,6CACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mCAEbL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACmC,EAAD,CACFC,IAAG,GAAAC,OAAKJ,EAAUK,KAAf,KAAAD,OAAuBH,GAC1BjB,MAAOgB,EAAUM,UAEjBlB,MAAOY,EAAUK,QAEnBxC,EAAAC,EAAAC,cAAA,QAAMG,UAAU,oCACb8B,EAAUO,SAGf1C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,wBACbL,EAAAC,EAAAC,cAAA,kCAAuBiC,EAAUQ,YACjC3C,EAAAC,EAAAC,cAAA,sBAAciC,EAAUS,OAAxB,SACA5C,EAAAC,EAAAC,cAAA,kBAAUiC,EAAUU,KAApB,cAYV,OACE7C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC4C,EAAD,MACF9C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACX4B,YAjDMzB,aCIEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.04d582b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.03fa02aa.png\";","import React from 'react';\r\nimport logo from '../img/logo.png';\r\n\r\nclass Image extends React.Component {\r\n    render () {\r\n        return (\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        );\r\n    }\r\n}\r\n\r\nexport { Image };","import React, { Component } from 'react';\r\nimport { Image } from '../components/Image';\r\n\r\nclass Navigation extends Component {\r\n     render () {\r\n         return (\r\n             <nav className=\"navbar navbar-expand-lg navbar-dark\">\r\n                <a href=\"/\"  className=\"text-white \"> \r\n                    {               \r\n                    this.props.titulo \r\n                    }\r\n                </a> \r\n                <div>\r\n                    <Image />\r\n                </div>  \r\n                {/* <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>                          */}\r\n             </nav>\r\n         );\r\n     }\r\n }\r\n\r\nexport default Navigation;","import React, { Component } from 'react';\r\nimport Navigation from './Navigation';\r\n\r\nclass Header extends Component {\r\n\r\n    render () {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <Navigation titulo=\"Star Wars   \"/>  \r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Message(props) {\r\n    return(\r\n        <a\r\n            style={{color: props.color}}\r\n            href={props.site}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n        >\r\n        {\r\n            props.title ? props.title : 'Mensaje por defecto'\r\n        }\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default Message;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport Message from './components/Message';\n// import Navigation from './components/Navigation';\n// import Image from './components/Image';\n\nclass App extends Component {\n  state = {\n    info: []\n  }\n\nasync componentDidMount() {\n    const dataRaw = await fetch ('https://swapi.co/api/people/')\n    const data = await dataRaw.json()\n\n    this.setState({info: data.results})\n  }\n\nrender() {\n  const characters = this.state.info.map(function(character, index){\n      return (            \n        <div className=\"col-md-4\">\n          <div className=\"card border-info bg-transparent mb-3 mt-4\">\n            <div className=\"card-header bg-dark border-info\">\n              {/* <img src=\"...\" class=\"card-img\" alt=\"...\"/> */}\n              <h3><Message\n                key={`${character.name}-${index}`}\n                color={character.eye_color}\n                // site={character.url}\n                title={character.name}\n                /></h3>\n              <span className=\"badge badge-pill badge-dark ml-2\">\n                {character.gender}\n              </span>\n            </div>        \n            <div className=\"card-body text-white\">\n              <p>AÃ±o de nacimiento: {character.birth_year}</p>\n              <p>Estatura: {character.height} cms.</p>\n              <p>Peso: {character.mass} kgs.</p> \n{/*           ==============PENDIENTE==============          \n              <p>Planeta: {character.homeworld}</p> \n              ===================================== */}\n\n            </div>\n          </div>        \n        </div>               \n      )\n    });\n\n\n    return (      \n      <div className=\"App\">\n        <Header />\n      <div className=\"container\">\n        <div className=\"row\">\n          { characters }\n        </div>\n      </div>\n\n        {/* <div className=\"container\">          \n          <div className=\"row mt-4\">\n            <div className=\"col-md-4 text-center\"> \n              <Message\n                color=\"blue\"\n                title=\"Google\"\n                site=\"https://google.com/\"\n              />\n              </div>\n              <div className=\"col-md-4 text-center\"> \n              <Message\n                color=\"green\"\n                title=\"Facebook\"\n                site=\"https://facebook.com/\"\n              /> \n              </div>\n            </div>\n          </div> */}\n      </div>\n    );\n  }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}